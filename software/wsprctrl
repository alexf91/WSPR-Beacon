#!/usr/bin/env python
#
# Copyright 2018 Alexander Fasching
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import sys
import time
import argparse
import struct
import contextlib
import datetime as dt
import subprocess

import sh
import usb

CTRL_GET_REGISTER = 0
CTRL_SET_REGISTER = 1

STATUS_OK = 0
STATUS_ERROR = 1

REG_LED = 0

# Registers for CLK0 output
REG_CLK0_FREQ_0 =  8
REG_CLK0_FREQ_1 =  9
REG_CLK0_FREQ_2 = 10
REG_CLK0_FREQ_3 = 11
REG_CLK0_ENABLE = 12


class BeaconException(Exception):
    pass


def get_devices():
    device_filter = dict(
        idVendor=0x16c0,
        idProduct=0x05dc,
        serial_number='oe5tkm.net:wspr-beacon'
    )
    return list(usb.core.find(**device_filter, find_all=True))


class Beacon(object):
    def __init__(self, dev : usb.Device):
        self.dev = dev

    def get_register(self, addr):
        buf = self.dev.ctrl_transfer(0xC0, CTRL_GET_REGISTER, 0, addr, 4)
        if len(buf) != 4:
            raise BeaconException('Received response with wrong size')

        value, status = struct.unpack('HH', buf)
        if status != STATUS_OK:
            raise BeaconException('Received response with error code %d' % status)

        return value


    def set_register(self, addr, value):
        buf = self.dev.ctrl_transfer(0xC0, CTRL_SET_REGISTER, value, addr, 4)
        if len(buf) != 4:
            raise BeaconException('Received response with wrong size')

        value, status = struct.unpack('HH', buf)
        if status != STATUS_OK:
            raise BeaconException('Received response with error code %d' % status)

        return value

    def set_enable(self, enable):
        """Enable/disable the frequency output."""
        return self.set_register(REG_CLK0_ENABLE, bool(enable))

    def set_frequency(self, freq):
        self.set_register(REG_CLK0_FREQ_0, (freq >>  0) & 0xFFFF)
        self.set_register(REG_CLK0_FREQ_1, (freq >> 16) & 0xFFFF)
        self.set_register(REG_CLK0_FREQ_2, (freq >> 32) & 0xFFFF)
        self.set_register(REG_CLK0_FREQ_3, (freq >> 48) & 0xFFFF)

    def get_frequency(self):
        f0 = self.get_register(REG_CLK0_FREQ_0)
        f1 = self.get_register(REG_CLK0_FREQ_1)
        f2 = self.get_register(REG_CLK0_FREQ_2)
        f3 = self.get_register(REG_CLK0_FREQ_3)

        return (f3 << 48) | (f2 << 32) | (f1 << 16) | f0


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--list', '-l', action='store_true',
                        help='show available devices')
    parser.add_argument('--blink', '-b', action='store_true',
                        help='blink LED')
    parser.add_argument('--device', '-d', type=int, default=0,
                        help='device index')
    parser.add_argument('--message', '-m', type=str, default=None,
                        help='message to transmit')

    args = parser.parse_args()

    devices = get_devices()
    if len(devices) == 0:
        print('Error: no WSPR devices found', file=sys.stderr)
        return 1

    if args.list:
        for i, dev in enumerate(devices):
            name = usb.util.get_string(dev, dev.iProduct)
            print('%d: %s' % (i, name))
        return

    if args.device < 0 or args.device >= len(devices):
        print('Error: invalid device index', file=sys.stderr)
        return 1

    dev = devices[args.device]
    dev.set_configuration()
    beacon = Beacon(dev)

    if args.blink:
        with contextlib.suppress(KeyboardInterrupt):
            while True:
                value = beacon.get_register(REG_LED)
                beacon.set_register(REG_LED, not value)
                time.sleep(0.1)


    if args.message:
        result = subprocess.run(['./wsprcode', args.message], stdout=subprocess.PIPE)
        output = result.stdout.split(b'\n')
        i = output.index(b'Channel symbols:')
        symbols = [int(x) for x in b' '.join(output[i+1:i+7]).split()]

        # Get the time when the transmission starts
        now = dt.datetime.now()
        minute = (now.minute + 2) if (now.minute % 2 == 0) else (now.minute + 1)
        start = now.replace(minute=minute, second=1, microsecond=0)

        # Wait until the transmission starts
        diff = (start - now).total_seconds()
        time.sleep(diff)

        try:
            beacon.set_enable(True)
            for sym in symbols:
                stop = dt.datetime.now() + dt.timedelta(seconds=0.682667)
                f = 1.4648 * sym

                beacon.set_frequency(7040000 + round(f))

                diff = (stop - dt.datetime.now()).total_seconds()
                time.sleep(diff)

        except KeyboardInterrupt:
            pass
        finally:
            beacon.set_enable(False)


if __name__ == '__main__':
    sys.exit(main() or 0)
